# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: "${file(./env.yml):SERVICE_NAME}"

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs4.3

  # you can overwrite defaults here
  #  stage: dev
  region: us-west-2

  environment:
    RDS_HOST: "${file(./env.yml):RDS_HOST}"
    RDS_PORT: "${file(./env.yml):RDS_PORT}"
    RDS_DATABASE: "${file(./env.yml):RDS_DATABASE}"
    RDS_USER: "${file(./env.yml):RDS_USER}"
    RDS_PASSWORD: "${file(./env.yml):RDS_PASSWORD}"

  # vpc:
  #   securityGroupIds:
  #     - ${file(./env.yml):VPC_SECURITY_GROUP}
  #   subnetIds:
  #     - ${file(./env.yml):VPC_SUBNET1}
  #     - ${file(./env.yml):VPC_SUBNET2}

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: Allow
      Action:
        - ec2:DescribeNetworkInterfaces
        - ec2:CreateNetworkInterface
      Resource: "arn:aws:rds:${self:provider.region}:*:*"

functions:
  sync:
    handler: greetings/sync.sync
    memorySize: 128

  list:
    handler: greetings/list.list
    memorySize: 128
    events:
      - http:
          path: greetings
          method: get
          cors: true

  create:
    handler: greetings/post.post
    memorySize: 128
    events:
      - http:
          path: greetings
          method: post
          cors: true
          integration: lambda
          authorizer:
            arn: ${file(./config/authorizer.js):arn}
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            identityValidationExpression: .*

  read:
    handler: greetings/get.get
    memorySize: 128
    events:
      - http:
          path: greetings/{id}
          method: get
          cors: true

  update:
    handler: greetings/put.put
    memorySize: 128
    events:
      - http:
          path: greetings/{id}
          method: put
          cors: true
          integration: lambda
          authorizer:
            arn: ${file(./config/authorizer.js):arn}
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            identityValidationExpression: .*

  delete:
    handler: greetings/delete.delete
    memorySize: 128
    events:
      - http:
          path: greetings/{id}
          method: delete
          cors: true
          integration: lambda
          authorizer:
            arn: ${file(./config/authorizer.js):arn}
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            identityValidationExpression: .*


# you can add CloudFormation resource templates here
resources:
  Resources:
    Rds:
      Type: AWS::RDS::DBInstance
      Properties:
        AllocatedStorage: "5"
        DBName: "${file(./env.yml):RDS_DATABASE}"
        DBInstanceIdentifier: "${file(./env.yml):SERVICE_NAME}"
        DBInstanceClass: "${file(./env.yml):RDS_INSTANCE_CLASS}"
        Engine: "mysql"
        EngineVersion: "5.6.27"
        MasterUsername: "${file(./env.yml):RDS_USER}"
        MasterUserPassword: "${file(./env.yml):RDS_PASSWORD}"
        MultiAZ: "false"
        PubliclyAccessible: "true"
        # DBSubnetGroupName: "${file(./env.yml):RDS_SUBNET_GROUP}"
        # VPCSecurityGroups:
        #   - ${file(./env.yml):RDS_SECURITY_GROUP}

plugins:
  - serverless-plugin-optimize
  - serverless-offline

custom:
  optimize:
    includePaths: ['config']

package:
  individually: true
